{"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.6.0","file_extension":".r","codemirror_mode":"r"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8215469,"sourceType":"datasetVersion","datasetId":4869378}],"isInternetEnabled":true,"language":"r","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This R environment comes with many helpful analytics packages installed\n# It is defined by the kaggle/rstats Docker image: https://github.com/kaggle/docker-rstats\n# For example, here's a helpful package to load\n\nlibrary(tidyverse) # metapackage of all tidyverse packages\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nlist.files(path = \"../input\")\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# library(tidyverse)  #helps wrangle data\n# Use the conflicted package to manage conflicts\n# library(conflicted)\n# # Set dplyr::filter and dplyr::lag as the default choices\n#conflict_prefer(\"filter\", \"dplyr\")\n#conflict_prefer(\"lag\", \"dplyr\")\n\ninstall.packages(\"tidyverse\")\nlibrary(conflicted)\n#=====================\n# STEP 1: COLLECT DATA\n#=====================\n# # Upload Divvy datasets (csv files) here\n\nlibrary(readr)\nq1_2019 <- read_csv(\"Documents/data_analize_capston/bike share/csv/Divvy_Trips_2019_Q1.csv\")\nq1_2020 <- read_csv(\"Documents/data_analize_capston/bike share/csv/Divvy_Trips_2020_Q1.csv\")\n#====================================================\n# STEP 2: WRANGLE DATA AND COMBINE INTO A SINGLE FILE\n#====================================================\n# Compare column names each of the files\n# While the names don't have to be in the same order, they DO need to match perfectly before \nlibrary(tidyverse)\n(q1_2019 <- rename(q1_2019\n                   ,ride_id = trip_id\n                   ,rideable_type = bikeid\n                   ,started_at = start_time\n                   ,ended_at = end_time\n                   ,start_station_name = from_station_name\n                   ,start_station_id = from_station_id\n                   ,end_station_name = to_station_name\n                   ,end_station_id = to_station_id\n                   ,member_casual = usertype\n))\n# Inspect the dataframes and look for incongruencies\n\nstr(q1_2019)\nstr(q1_2020)\n# Convert ride_id and rideable_type to character so that they can stack correctly\nq1_2019 <-  mutate(q1_2019, ride_id = as.character(ride_id)\n                   ,rideable_type = as.character(rideable_type)) \n\n# Stack individual quarter's data frames into one big data frame\nall_trips <- bind_rows(q1_2019, q1_2020)#, q3_2019)#, q4_2019, q1_2020)\n\n# Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020\nall_trips <- all_trips %>%  \n  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender,  \"tripduration\"))\n\n#======================================================\n# STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS\n#======================================================\n# Inspect the new table that has been created\n\ncolnames(all_trips)  #List of column names\nnrow(all_trips)  #How many rows are in data frame?\ndim(all_trips)  #Dimensions of the data frame?\nhead(all_trips)  #See the first 6 rows of data frame.  Also tail(all_trips)\nstr(all_trips)  #See list of columns and data types (numeric, character, etc)\nsummary(all_trips)  #Statistical summary of data. Mainly for numerics\n\n# There are a few problems we will need to fix:\n\n# (1) In the \"member_casual\" column, there are two names for members (\"member\" and \"Subscriber\") and two names for casual riders (\"Customer\" and \"casual\"). We will need to consolidate that from four to two labels.\nall_trips <-  all_trips %>% \n  mutate(member_casual = recode(member_casual\n                                ,\"Subscriber\" = \"member\"\n                                ,\"Customer\" = \"casual\"))\n\n# Check to make sure the proper number of observations were reassigned\ntable(all_trips$member_casual)\n\n# (2) The data can only be aggregated at the ride-level, which is too granular. We will want to add some additional columns of data -- such as day, month, year -- that provide additional opportunities to aggregate the data.\n# Add columns that list the date, month, day, and year of each ride\n# This will allow us to aggregate ride data for each month, day, or year ... before completing these operations we could only aggregate at the ride level\n# https://www.statmethods.net/input/dates.html more on date formats in R found at that link\n\nall_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd\nall_trips$month <- format(as.Date(all_trips$date), \"%m\")\nall_trips$day <- format(as.Date(all_trips$date), \"%d\")\nall_trips$year <- format(as.Date(all_trips$date), \"%Y\")\nall_trips$day_of_week <- format(as.Date(all_trips$date), \"%A\")\n\n\n\n# (3) We will want to add a calculated field for length of ride since the 2020Q1 data did not have the \"tripduration\" column. We will add \"ride_length\" to the entire dataframe for consistency.\n\n# Add a \"ride_length\" calculation to all_trips (in seconds)\n# https://stat.ethz.ch/R-manual/R-devel/library/base/html/difftime.html\n\nall_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)\nstr(all_trips)\n\n# (4) There are some rides where tripduration shows up as negative, including several hundred rides where Divvy took bikes out of circulation for Quality Control reasons. We will want to delete these rides.\n# Remove \"bad\" data\n# The dataframe includes a few hundred entries when bikes were taken out of docks and checked for quality by Divvy or ride_length was negative\n# We will create a new version of the dataframe (v2) since data is being removed\n# https://www.datasciencemadesimple.com/delete-or-drop-rows-in-r-with-conditions-2/\n\nall_trips_v2 <- all_trips[!(all_trips$start_station_name == \"HQ QR\" | all_trips$ride_length<0),]\n\n#=====================================\n# STEP 4: CONDUCT DESCRIPTIVE ANALYSIS\n#=====================================\n# Descriptive analysis on ride_length (all figures in seconds)\n\nmean(all_trips_v2$ride_length) #straight average (total ride length / rides)\nmedian(all_trips_v2$ride_length) #midpoint number in the ascending array of ride lengths\nmax(all_trips_v2$ride_length) #longest ride\nmin(all_trips_v2$ride_length) #shortest ride\n\n# You can condense the four lines above to one line using summary() on the specific attribute\nsummary(all_trips_v2$ride_length)\n\n\n# Compare members and casual users\naggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)\naggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)\naggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)\naggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)\n\n# See the average ride time by each day for members vs casual users\naggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)\n\n#how many trips each type of clients made\naggregate(all_trips_v2$ride_id ~ all_trips_v2$member_casual, FUN = length)\n\n# Notice that the days of the week are out of order. Let's fix that.\nall_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"))\n\n# Now, let's run the average ride time by each day for members vs casual users\naggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)\n\n# analyze ridership data by type and weekday\nall_trips_analyze <- all_trips_v2 %>% \n  mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()\n  group_by(member_casual, weekday) %>%  #groups by usertype and weekday\n  summarise(number_of_rides = n()\t\t\t\t\t\t\t#calculates the number of rides and average duration \n            ,average_duration = mean(ride_length)) %>% \t\t# calculates the average duration\n  arrange(member_casual, weekday)\t\t\t\t\t\t\t\t# sorts\n\n\n# Let's visualize the number of rides by rider type\nall_trips_v2 %>% \n  mutate(weekday = wday(started_at, label = TRUE)) %>% \n  group_by(member_casual, weekday) %>% \n  summarise(number_of_rides = n()\n            ,average_duration = mean(ride_length)) %>% \n  arrange(member_casual, weekday)  %>% \n  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +\n  geom_col(position = \"dodge\")\n#another way to write the code \nlibrary(ggplot2)\nggplot(data = all_trips_analyze)+geom_col(mapping = aes(x= weekday, y = number_of_rides,fill= member_casual), position = \"dodge\" )\n\n\n# Let's create a visualization for average duration\nall_trips_v2 %>% \n  mutate(weekday = wday(started_at, label = TRUE)) %>% \n  group_by(member_casual, weekday) %>% \n  summarise(number_of_rides = n()\n            ,average_duration = mean(ride_length)) %>% \n  arrange(member_casual, weekday)  %>% \n  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +\n  geom_col(position = \"dodge\")\n#another way to write the code \nggplot(data = all_trips_analyze)+geom_col(mapping = aes(x= weekday, y = average_duration,fill= member_casual), position = \"dodge\" )\n\n\n","metadata":{},"execution_count":null,"outputs":[]}]}